"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5439],{1956:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"llm-toy-project/Main","title":"Main","description":"Overview","source":"@site/docs/llm-toy-project/Main.md","sourceDirName":"llm-toy-project","slug":"/llm-toy-project/Main","permalink":"/my-website/docs/llm-toy-project/Main","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/llm-toy-project/Main.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"LLM Toy Project","permalink":"/my-website/docs/category/llm-toy-project"},"next":{"title":"Timeline","permalink":"/my-website/docs/llm-toy-project/Timeline"}}');var r=t(4848),s=t(8453);const o={sidebar_position:1},a=void 0,l={},d=[{value:"Overview",id:"overview",level:2},{value:"Features:",id:"features",level:2},{value:"Pictures and Video",id:"pictures-and-video",level:2},{value:"Electrical Design",id:"electrical-design",level:2},{value:"Software Design",id:"software-design",level:2},{value:"Firmware on the ESP32",id:"firmware-on-the-esp32",level:3},{value:"Software on the Server (MacBook Pro M1)",id:"software-on-the-server-macbook-pro-m1",level:3},{value:"Case",id:"case",level:2},{value:"Evaluation, Testing and Challenges",id:"evaluation-testing-and-challenges",level:2},{value:"Results",id:"results",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Acknowledgments &amp; Credits",id:"acknowledgments--credits",level:2},{value:"Attribution for Raspberry Pi Enclosure",id:"attribution-for-raspberry-pi-enclosure",level:3}];function c(e){const n={a:"a",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["While walking from my tutorial for mini design 2, I got the idea of integrating offline LLMs + 3d printing + microprocessors, to create a very intelligent 3d printed toy that you can give to your kids, to enhance their learning at a point of their life where the return on investment for education would likely be the highest that is there early childhood from ages 0 - 10, this is because their brain have the greatest amount of Neuro-plasticity here. What came about this idea was my ",(0,r.jsx)(n.strong,{children:"LLM toy system"}),". I had the idea on March 20, 2025 where I began my research and project planning, but the vast majority of the work started after my winter classes were completed, and I was given the once in a lifetime opportunity of having no exams during that semester, which meant I had around 3-4 weeks of completely free time before the start of my summer classes. By May 6, 2025 I had completed the entire projects final firmware, and system integration and had a working product. I just started creating portfolio documentations."]}),"\n",(0,r.jsxs)(n.p,{children:["This project had a heavy focus on ",(0,r.jsx)(n.strong,{children:"system integration"})," (requiring many long nights of root cause analysis, bugging, design compromises and iteration) + ",(0,r.jsx)(n.strong,{children:"embedded systems design and IOT development"})," (which represented a great learning opportunity for me as a mechanical engineering student as a required me to learn about communication protocols, like I2S and WebSocket) + ",(0,r.jsx)(n.strong,{children:"ML models integration"}),", which is a completely unprecedented thing for me in a personal project. As such, a lot of the design choices on both the hardware and software side were made for a system validation purposes to easily debug the system."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Privacy & Security forward physical AI device"}),"\n",(0,r.jsx)(n.li,{children:"Only needs a ML server running on the LAN (edge AI), it just needs your router, not your Internet (offline product)"}),"\n",(0,r.jsx)(n.li,{children:"Multiple toys can be connected to a single Home ML server"}),"\n",(0,r.jsx)(n.li,{children:"your data stays within your control and does not go to a data harvesting AI corporation"}),"\n",(0,r.jsx)(n.li,{children:"battery powered with rechargeable battery"}),"\n",(0,r.jsx)(n.li,{children:"portable and lightweight"}),"\n",(0,r.jsx)(n.li,{children:"3-D printed case"}),"\n",(0,r.jsx)(n.li,{children:"Speaker and microphone system"}),"\n",(0,r.jsx)(n.li,{children:"ESP32 micro-controller with breakout board"}),"\n",(0,r.jsx)(n.li,{children:"Python proxy server software with a GUI and log console"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"pictures-and-video",children:"Pictures and Video"}),"\n",(0,r.jsx)(n.p,{children:"First Brainstorming Dataflow chart: [[Rough Data Flowchart.canvas|Rough Data Flowchart]]"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"electrical-design",children:"Electrical Design"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"3.7V 800mAh Li-ion Battery with a 18650 form factor and JST connector"}),"\n",(0,r.jsx)(n.li,{children:"MAX 98357A I2S Class D Audio Amplifier Module connected to 1 EK1725 2 inch 4Ohm 3W Speaker"}),"\n",(0,r.jsx)(n.li,{children:"INMP441 I2S microphone, I decided not to use any gain because it wasn't necessary with the LLM\nThis is my initial design with a display."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(9079).A+"",width:"2696",height:"1024"})}),"\n",(0,r.jsx)(n.p,{children:"Second iteration with multiplexing (attempting to connect the display, even though I was unknowingly IO constrained)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(8980).A+"",width:"2454",height:"1084"})}),"\n",(0,r.jsx)(n.p,{children:"My third iteration simply removed the display as further digging into the ESP32 data sheet revealed that the processor could only output two I2S communication lanes simultaneously so the final designer simply ended up using the microphone and audio amplifier. I further research that the raspberry PI could support significantly more I2S lanes however this was beyond my budget and time."}),"\n",(0,r.jsx)(n.p,{children:"Below is a schematic I designed in KiCad of the final working design."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(6414).A+"",width:"2218",height:"1432"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(2579).A+"",width:"4032",height:"3024"})}),"\n",(0,r.jsx)(n.h2,{id:"",children:(0,r.jsx)(n.img,{src:t(8457).A+"",width:"4032",height:"3024"})}),"\n",(0,r.jsx)(n.h2,{id:"software-design",children:"Software Design"}),"\n",(0,r.jsx)(n.p,{children:"Hardware and Software work best when they're developed together which is a design principle I strongly believe in so I convergently develop both the software and hardware at the same time."}),"\n",(0,r.jsx)(n.p,{children:"I initially tried using multiple different simulation software's to help with developing the hardware however, none had all the specific hardware that I had purchased for the system so software was developed hand-in-hand with the hardware. For instance, I could find no simulation software (that was free and open source) could correctly mapped out the particular behaviour of my ESP32."}),"\n",(0,r.jsx)(n.p,{children:"Also I used the Agile software development framework to product my software, I knew from the very beginning that I would make lots of mistakes a long the way of developing this product as this project was a significant learning opportunity, so a development pattern that required me to constantly iterate was necessary. All the of Firmware and Software that I developed for the project has dates on them to capture when they were made and track my progress over time."}),"\n",(0,r.jsx)(n.p,{children:"This section can be spill into two components:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Firmware on the ESP32"}),"\n",(0,r.jsx)(n.li,{children:"Software on the Server"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Below is a High-Level Architecture Overview of the project:"}),"\n",(0,r.jsx)(n.mermaid,{value:'%%{init: {"flowchart": {"useMaxWidth": true}}}%%\nflowchart LR\n  %% ---- Device side ----\n  subgraph ESP32_Device\n    FW[State machine and loop]\n    BTN[Button and ISR]\n    LED[Status LED]\n    MIC[I2S mic]\n    SPK[I2S speaker]\n    WSC[WebSocket client]\n    HTTPC[HTTP client]\n  end\n\n  %% ---- Server side ----\n  subgraph Server_Host\n    WSS[WebSocket server]\n    AC[AudioClient sessions]\n    REC[Record to wav]\n    STT[Whisper stt]\n    LLM[LM Studio llm]\n    CLEAN[Text cleaner]\n    TTS[Coqui tts]\n    FLASK[Flask static file server]\n    GUI[PyQt gui control and logs]\n    DIR1[audio_output directory]\n    DIR2[esp32_recordings directory]\n  end\n\n  USER[User]\n\n  %% User and UX\n  USER --\x3e|press button or speak| BTN\n  FW --\x3e LED\n  SPK --\x3e|audio heard| USER\n\n  %% Control plane\n  BTN --\x3e|button_press start or stop| WSC\n  WSC <--\x3e |json control| WSS\n  WSS --\x3e AC\n\n  %% Mic data path to server\n  MIC --\x3e|pcm 16k mono| WSC\n  WSS --\x3e|pcm bytes| REC\n  REC --\x3e DIR2\n\n  %% Processing pipeline on server\n  REC --\x3e|wav path| STT --\x3e|transcript| LLM --\x3e|reply text| CLEAN --\x3e|clean text| TTS --\x3e|wav file| DIR1\n\n  %% Playback path back to device\n  WSS --\x3e|play_audio url| WSC\n  HTTPC --\x3e|http get wav| FLASK\n  FLASK --\x3e|serve wav| HTTPC\n  HTTPC --\x3e SPK\n\n  %% GUI influence and status\n  GUI --\x3e|start stop config| WSS\n  GUI --\x3e|config| FLASK\n  GUI --\x3e|status and logs| USER'}),"\n",(0,r.jsx)(n.h3,{id:"firmware-on-the-esp32",children:"Firmware on the ESP32"}),"\n",(0,r.jsx)(n.p,{children:"Dataflow Diagram:"}),"\n",(0,r.jsx)(n.mermaid,{value:'%%{init: {"flowchart": {"useMaxWidth": true}}}%%\nflowchart TD\n  subgraph ESP32 Firmware\n    ST[State controller setup loop EspState]\n    BTN[Button ISR and handler]\n    WIFI[WiFi connect and reconnect]\n    WS[WebSocket client events and JSON]\n    MIC[Mic capture and packetizer I2S0 RX]\n    BUF[audioSendBuffer 1024 bytes]\n    JSONBUF[jsonTxBuffer and jsonRxBuffer]\n    SPK[Speaker playback I2S1 TX]\n    HBUF[HTTP buffer and sample buffer]\n    LED[LED status patterns]\n  end\n\n  %% external ends\n  U[User]\n  MIC_HW[Mic hardware]\n  SPK_HW[Speaker hardware]\n  WSS[Python WebSocket server]\n  HTTP[HTTP audio server]\n\n  %% user interactions\n  U --\x3e|active LOW press| BTN\n  LED --\x3e|blink by state| U\n\n  %% hardware links\n  MIC_HW --\x3e|I2S0 RX| MIC\n  SPK --\x3e|I2S1 TX| SPK_HW\n\n  %% supervision\n  WIFI --\x3e ST\n  ST --\x3e LED\n  ST --\x3e WS\n  ST --\x3e MIC\n  ST --\x3e SPK\n\n  %% button to server control plane\n  BTN --\x3e|button_press start or stop| JSONBUF --\x3e WS\n  WS --\x3e|send JSON| WSS\n\n  %% server to device control plane\n  WSS --\x3e|setup_mic_and_record| WS --\x3e MIC\n  WSS --\x3e|play_audio with url| WS --\x3e SPK\n  WSS --\x3e|acks pings errors| WS --\x3e ST\n\n  %% mic data path to server\n  MIC --\x3e|PCM 16 bit mono 16 kHz| BUF --\x3e|binary frames 1024 bytes| WS\n  WS --\x3e|send binary| WSS\n\n  %% playback path from url\n  SPK --\x3e|HTTP GET| HTTP\n  HTTP --\x3e|WAV bytes skip 44 header| SPK\n  SPK --\x3e|scale volume 0.03| HBUF --\x3e|to I2S1| SPK\n  SPK --\x3e|playback_complete JSON| WS --\x3e WSS'}),"\n",(0,r.jsx)(n.p,{children:"Completed: 2025-05-06 at 9:03 PM"}),"\n",(0,r.jsx)(n.h3,{id:"software-on-the-server-macbook-pro-m1",children:"Software on the Server (MacBook Pro M1)"}),"\n",(0,r.jsx)(n.p,{children:"Dataflow Diagram:"}),"\n",(0,r.jsx)(n.mermaid,{value:'%%{init: {"flowchart": {"useMaxWidth": true}}}%%\nflowchart TD\n  subgraph Proxy_Server_Python\n    WS[WebSocket server and handler]\n    AC[AudioClient session state]\n    REC[Recording to WAV start append stop]\n    PROC[Process complete file coordinator]\n    STTR[STT runner whisper cpp]\n    LLMR[LLM client]\n    CLEAN[Text cleaner for TTS]\n    TTSR[TTS runner coqui]\n    FL[Flask static file server]\n    LOG[Log panel]\n    CFG[Config panel]\n    STATUS[Status bar]\n    AUDIO_DIR[audio_output directory]\n    REC_DIR[esp32_recordings directory]\n  end\n\n  %% GUI control and feedback\n  USER[User] --\x3e |start stop configure| CFG\n  CFG --\x3e |current config| WS\n  CFG --\x3e |current config| FL\n  WS --\x3e |status and counts| STATUS\n  WS --\x3e |logs| LOG\n  PROC --\x3e |logs| LOG\n  STTR --\x3e |logs| LOG\n  LLMR --\x3e |logs| LOG\n  TTSR --\x3e |logs| LOG\n  FL --\x3e |logs| LOG\n\n  %% ESP32 interaction\n  ESP[ESP32 client] --\x3e |JSON button_press start_record| WS\n  WS --\x3e AC\n  AC --\x3e |begin recording| REC\n  REC --\x3e |open WAV in dir| REC_DIR\n  ESP --\x3e |binary PCM chunks| WS\n  WS --\x3e |append bytes| REC\n\n  ESP --\x3e |JSON button_press stop_record| WS\n  WS --\x3e |finalize WAV path| REC\n  REC --\x3e |completed WAV path| PROC\n\n  %% processing pipeline\n  PROC --\x3e |run STT on path| STTR\n  STTR --\x3e |transcript text| LLMR\n  LLMR --\x3e |assistant text| CLEAN\n  CLEAN --\x3e |sanitized text| TTSR\n  TTSR --\x3e |create WAV file| AUDIO_DIR\n  FL --\x3e |serve files from dir| AUDIO_DIR\n  PROC --\x3e |build URL and send play_audio| WS\n  WS --\x3e |JSON play_audio with URL| ESP\n\n  %% playback completion\n  ESP --\x3e |JSON playback_complete| WS\n  WS --\x3e |ack and switch to speaker mode| AC'}),"\n",(0,r.jsx)(n.h2,{id:"case",children:"Case"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(5317).A+"",width:"1924",height:"1464"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Removed the second speaker holes, as the design only used 1 EK1725 speaker"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Created a microphone housing module for the INMP441 microphone\n",(0,r.jsx)(n.img,{src:t(6200).A+"",width:"2112",height:"1394"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Extended the port opening to the left so that the on/off switch and USB-C port on the breakout board can be easily accessed."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Created a housing module for holding the breadboard that holds the button for the system"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Removed the second EK1725 mounting nubs"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"evaluation-testing-and-challenges",children:"Evaluation, Testing and Challenges"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Interference in the Speakers"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"And decided to first create a 3D printed case for the speakers (this made the problem better but did not fix the problem at all)"}),"\n",(0,r.jsx)(n.li,{children:"I noticed that the breadboard positioning of the electrical pins would modulate the signal significantly."}),"\n",(0,r.jsx)(n.li,{children:"I eliminated the breadboard from the final design all together (this still only partly fixed the issue)"}),"\n",(0,r.jsx)(n.li,{children:"Tuned the software to get the sound more in line with what a real speaker might sound like."}),"\n",(0,r.jsx)(n.li,{children:"Encased the entire unit into a case (this along with step 4 worked the best)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"I2S Overcrowding issues on the ESP32"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Attempted multiplexing between 2 I2S lanes (didn't work)"}),"\n",(0,r.jsx)(n.li,{children:"Referenced the Official Data sheet for the ESP32 and it realized that the chip can only handle 2 I2S lanes."}),"\n",(0,r.jsx)(n.li,{children:"Used different communication protocol for the display (didn't work)"}),"\n",(0,r.jsx)(n.li,{children:"Removed the display completely from the final prototype (only partially fixed)"}),"\n",(0,r.jsx)(n.li,{children:"Implemented a system of installing then reinstalling the drivers for the specific speaker and microphone (on the firmware side) every time they were in use (Worked)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"ML Model Performance Optimization"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Attempted to fix initial program speed issues by keeping the models loaded into memory - this made a significant performance improvement"}),"\n",(0,r.jsx)(n.li,{children:"However this used a significant amount of system resources and risked program stability - so finding a way to reduce memory and increase performance was essential"}),"\n",(0,r.jsx)(n.li,{children:"This was achieved by recompiling the STT Model (Whisper) in a framework that was optimized for Apple Silicon and using a small english only model instead of the large multi-language ones"}),"\n",(0,r.jsx)(n.li,{children:"The same was done for the TTS model"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"results",children:"Results"}),"\n",(0,r.jsx)(n.p,{children:"Video using the LLM Toy"}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Short-Term"}),"\nIntegrate"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"PCB Development"}),"\n",(0,r.jsx)(n.li,{children:"MCP Server for a customized knowledge base"}),"\n",(0,r.jsx)(n.li,{children:"Bit level transmission of Audio files (Maybe)"}),"\n",(0,r.jsx)(n.li,{children:"Continuous Conversation"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Long-Term"})}),"\n",(0,r.jsx)(n.h2,{id:"-1",children:(0,r.jsx)(n.img,{src:t(7425).A+"",width:"2032",height:"662"})}),"\n",(0,r.jsx)(n.h2,{id:"acknowledgments--credits",children:"Acknowledgments & Credits"}),"\n",(0,r.jsx)(n.h3,{id:"attribution-for-raspberry-pi-enclosure",children:"Attribution for Raspberry Pi Enclosure"}),"\n",(0,r.jsxs)(n.p,{children:['This project incorporates a modified version of the "Enclosure for Raspberry Pi with Speakers" 3D model, originally designed by Pierre (Pierre_200611 on Printables) and published on Printables (',(0,r.jsx)(n.a,{href:"https://www.printables.com/model/698359-enclosure-for-raspberry-pi-with-speakers",children:"https://www.printables.com/model/698359-enclosure-for-raspberry-pi-with-speakers"}),"). The original work is licensed under a Creative Commons Attribution 4.0 International License."]}),"\n",(0,r.jsx)(n.p,{children:'Modifications were made, see the "Case" Section of the document.'})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},2579:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/IMG_9350-97cb48e236d33024be06ea7996297346.jpeg"},5317:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Screenshot-2025-08-01-at-4.12.06PM-1f271a945b7f49260c094614d96074c1.png"},6200:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Screenshot-2025-08-01-at-4.13.44PM-6fe5d9ddabf82be06b6b0046b4ebba8b.png"},6414:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Screenshot-2025-08-23-a68709a034fa925b101ce37c8d579fdc.png"},7425:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Screenshot-2025-08-24-2feacba8ab48ef1b426ff7ed12ca23f5.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},8457:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/IMG_9963-1a2cce8fbb310e15fa4ee3fb9b762feb.jpeg"},8980:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Screenshot-2025-06-29-at-6.09.15-PM-6b0cf38e21bf78bd22d7eda0c6972d9a.png"},9079:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Screenshot-2025-06-29-at-5.49.40-PM-9257a0e7bac47a158db9056cddb92697.png"}}]);