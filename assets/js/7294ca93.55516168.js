"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5439],{1956:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"llm-toy-project/Main","title":"Main","description":"Purpose/Goal","source":"@site/docs/llm-toy-project/Main.md","sourceDirName":"llm-toy-project","slug":"/llm-toy-project/Main","permalink":"/my-website/docs/llm-toy-project/Main","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/llm-toy-project/Main.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"LLM Toy Project","permalink":"/my-website/docs/category/llm-toy-project"},"next":{"title":"Timeline","permalink":"/my-website/docs/llm-toy-project/Timeline"}}');var t=i(4848),s=i(8453);const o={sidebar_position:1},a=void 0,l={},d=[{value:"Purpose/Goal",id:"purposegoal",level:2},{value:"Overview",id:"overview",level:2},{value:"Features:",id:"features",level:2},{value:"Electrical Design",id:"electrical-design",level:2},{value:"Software Design &amp; Integration",id:"software-design--integration",level:2},{value:"Firmware on the ESP32",id:"firmware-on-the-esp32",level:3},{value:"Software on the Server (MacBook Pro M1)",id:"software-on-the-server-macbook-pro-m1",level:3},{value:"Case",id:"case",level:2},{value:"Evaluation, Testing, and Challenges",id:"evaluation-testing-and-challenges",level:2},{value:"1. Speaker Interference",id:"1-speaker-interference",level:3},{value:"2. I2S Overcrowding on the ESP32",id:"2-i2s-overcrowding-on-the-esp32",level:3},{value:"3. Machine Learning Model Optimization",id:"3-machine-learning-model-optimization",level:3},{value:"Results",id:"results",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Acknowledgments &amp; Credits",id:"acknowledgments--credits",level:2},{value:"Attribution for Raspberry Pi Enclosure",id:"attribution-for-raspberry-pi-enclosure",level:3}];function c(e){const n={a:"a",br:"br",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"purposegoal",children:"Purpose/Goal"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"To create a functional, portable prototype of an offline LLM-capable toy that intelligently responds to children through voice interaction \u2013 demonstrating successful integration of hardware, embedded systems, and AI within a single, lightweight device."}),"\n",(0,t.jsx)(n.li,{children:"Complete development within 1 month"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["While walking after finishing my Mini Design 2 tutorial (working on the ",(0,t.jsx)(n.a,{href:"/docs/category/floating-solar-tracker-project",children:"Floating Solar Tracker"}),"), I conceived an idea for integrating offline LLMs, 3D printing, and microprocessors to create an intelligent, 3D-printed toy designed to enhance early childhood learning. I believe this approach would yield the highest return on investment for education during the critical early developmental window (ages 0\u201310), when the brain exhibits peak neuroplasticity. This concept became the foundation of my ",(0,t.jsx)(n.strong,{children:"LLM Toy System"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"I developed the idea on March 20, 2025, and began formal research and project planning immediately. However, the majority of development work commenced after completing my winter semester classes. This period provided a rare opportunity: with no exams during that semester, I had approximately 3\u20134 weeks of uninterrupted time before my summer classes began. By May 6, 2025, I had completed final firmware integration, system validation, and delivered a functional prototype."}),"\n",(0,t.jsxs)(n.p,{children:["This project emphasized ",(0,t.jsx)(n.strong,{children:"system integration"})," (requiring extensive root-cause analysis, debugging, and iterative design compromises), ",(0,t.jsx)(n.strong,{children:"embedded systems development and IoT implementation"})," (which deepened my mechanical engineering skills through learning communication protocols like I\xb2S and WebSocket), and ",(0,t.jsx)(n.strong,{children:"ML model integration"}),"\u2014an unprecedented focus for a personal project. Consequently, hardware and software design choices prioritized system validation and debuggability to ensure rapid problem resolution."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"features",children:"Features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Privacy & security-first physical AI device"})," (no external data transmission)"]}),"\n",(0,t.jsx)(n.li,{children:"Requires only a machine learning server running on the local network (LAN) \u2013 no internet connectivity needed"}),"\n",(0,t.jsx)(n.li,{children:"Supports multiple toys connected to a single home ML server"}),"\n",(0,t.jsx)(n.li,{children:"Data remains under your control; no data is shared with third-party corporations"}),"\n",(0,t.jsx)(n.li,{children:"Battery-powered with rechargeable batteries (portable and lightweight)"}),"\n",(0,t.jsx)(n.li,{children:"3D-printed case with integrated speaker and microphone system"}),"\n",(0,t.jsx)(n.li,{children:"ESP32 microcontroller (with breakout board)"}),"\n",(0,t.jsx)(n.li,{children:"Python proxy server software featuring a GUI and real-time logging console"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"electrical-design",children:"Electrical Design"}),"\n",(0,t.jsxs)(n.p,{children:["This prototype implements a ",(0,t.jsx)(n.strong,{children:"battery-powered, 3D-printed LLM toy system"})," with verified specifications for real-world interaction:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Microcontroller"}),": ESP32-WROOM-32E module"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Dual-core Tensilica LX6 processor with integrated Wi-Fi and Bluetooth (enables low latentcy connectivity)"}),"\n",(0,t.jsx)(n.li,{children:"Provides I\xb2S interfaces for audio input/output"}),"\n",(0,t.jsx)(n.li,{children:"Firmware handles WebSocket communication and driver management"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Power"}),": 3.7V 800mAh Li-ion battery (18650)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Provides ",(0,t.jsx)(n.strong,{children:"45+ minutes of continuous play"})]}),"\n",(0,t.jsx)(n.li,{children:"Recharged via USB-C"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Audio Output"}),": MAX98357A I\xb2S Class-D amplifier"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Drives a 2-inch 4\u03a9 / 3W EK1725 speaker"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Audio Input"}),": INMP441 I\xb2S microphone"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Digital MEMS microphone with integrated ADC"}),"\n",(0,t.jsx)(n.li,{children:"Low-noise voice capture without the need for external gain circuitry"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Indicators & Controls"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Status LED with programmable blink patterns (Wi-Fi, active listening, standby states)"}),"\n",(0,t.jsx)(n.li,{children:"User button connected to GPIO (debounced in firmware, ISR-driven)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Connectivity"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Wi-Fi (802.11 b/g/n) for real-time communication with the Python WebSocket server"}),"\n",(0,t.jsx)(n.li,{children:"Fully tested local-network reliability during prototype validation"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Prototype Validation"}),": All components were physically assembled and tested for baseline functionality"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Final hardware assembly"}),":",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.img,{alt:"Final hardware",src:i(8457).A+"",width:"4032",height:"3024"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.em,{children:"Final schematic"}),":\n",(0,t.jsx)(n.img,{alt:"Schematic",src:i(6414).A+"",width:"2218",height:"1432"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"software-design--integration",children:"Software Design & Integration"}),"\n",(0,t.jsx)(n.p,{children:"Hardware and software work best when developed concurrently\u2014a design principle I strongly believe in. I therefore develop both the software and hardware simultaneously."}),"\n",(0,t.jsx)(n.p,{children:"I initially used multiple simulation tools to aid hardware development, but none could accurately model the specific hardware I had purchased for the system. As a result, software development proceeded hand-in-hand with hardware implementation. For instance, I found no free, open-source simulation software that could correctly map the behavior of my ESP32."}),"\n",(0,t.jsx)(n.p,{children:"Additionally, I applied an Agile software development framework to produce the software. I knew from the outset that this project would involve numerous iterations and corrections due to its nature as a significant learning opportunity. Thus, an iterative development approach was essential. All firmware and software components for this project are datestamped to track development timelines and progress."}),"\n",(0,t.jsx)(n.p,{children:"This section can be divided into two components:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Firmware for the ESP32"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Server software"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Below is a High-Level Architecture Overview of the project:"}),"\n",(0,t.jsx)(n.mermaid,{value:'%%{init: {"flowchart": {"useMaxWidth": true}}}%%\nflowchart LR\n  %% ---- Device side ----\n  subgraph ESP32_Device\n    FW[State machine and loop]\n    BTN[Button and ISR]\n    LED[Status LED]\n    MIC[I2S mic]\n    SPK[I2S speaker]\n    WSC[WebSocket client]\n    HTTPC[HTTP client]\n  end\n\n  %% ---- Server side ----\n  subgraph Server_Host\n    WSS[WebSocket server]\n    AC[AudioClient sessions]\n    REC[Record to wav]\n    STT[Whisper stt]\n    LLM[LM Studio llm]\n    CLEAN[Text cleaner]\n    TTS[Coqui tts]\n    FLASK[Flask static file server]\n    GUI[PyQt gui control and logs]\n    DIR1[audio_output directory]\n    DIR2[esp32_recordings directory]\n  end\n\n  USER[User]\n\n  %% User and UX\n  USER --\x3e|press button or speak| BTN\n  FW --\x3e LED\n  SPK --\x3e|audio heard| USER\n\n  %% Control plane\n  BTN --\x3e|button_press start or stop| WSC\n  WSC <--\x3e |json control| WSS\n  WSS --\x3e AC\n\n  %% Mic data path to server\n  MIC --\x3e|pcm 16k mono| WSC\n  WSS --\x3e|pcm bytes| REC\n  REC --\x3e DIR2\n\n  %% Processing pipeline on server\n  REC --\x3e|wav path| STT --\x3e|transcript| LLM --\x3e|reply text| CLEAN --\x3e|clean text| TTS --\x3e|wav file| DIR1\n\n  %% Playback path back to device\n  WSS --\x3e|play_audio url| WSC\n  HTTPC --\x3e|http get wav| FLASK\n  FLASK --\x3e|serve wav| HTTPC\n  HTTPC --\x3e SPK\n\n  %% GUI influence and status\n  GUI --\x3e|start stop config| WSS\n  GUI --\x3e|config| FLASK\n  GUI --\x3e|status and logs| USER'}),"\n",(0,t.jsx)(n.h3,{id:"firmware-on-the-esp32",children:"Firmware on the ESP32"}),"\n",(0,t.jsx)(n.p,{children:"Dataflow Diagram:"}),"\n",(0,t.jsx)(n.mermaid,{value:'%%{init: {"flowchart": {"useMaxWidth": true, "curve": "basis"}}}%%\nflowchart TD\n  subgraph ESP32_Firmware\n    ST[State controller EspState];\n    BTN[Button ISR and handler];\n    WIFI[WiFi connect / reconnect];\n    WS[WebSocket client];\n    MIC[Mic capture I2S0 RX];\n    BUF[audioSendBuffer 1024 bytes];\n    JSONBUF[jsonTxBuffer / jsonRxBuffer];\n    SPK[Speaker playback I2S1 TX];\n    HBUF[HTTP buffer + sample buf];\n    LED[LED status patterns];\n  end;\n\n  %% external ends\n  U[User];\n  MIC_HW[Mic hardware];\n  SPK_HW[Speaker hardware];\n  WSS[Python WebSocket server];\n  HTTP[HTTP audio server];\n\n  %% user interactions\n  U --\x3e|press| BTN;\n  LED --\x3e|blink| U;\n\n  %% hardware links\n  MIC_HW --\x3e|I2S0 RX| MIC;\n  SPK --\x3e|I2S1 TX| SPK_HW;\n\n  %% supervision\n  WIFI --\x3e ST;\n  ST --\x3e LED;\n  ST --\x3e WS;\n  ST --\x3e MIC;\n  ST --\x3e SPK;\n\n  %% button to server control plane\n  BTN --\x3e JSONBUF --\x3e WS;\n  JSONBUF --\x3e M_btn;\n  M_btn[[JSON: button_press start/stop]];\n  M_btn --\x3e WSS;\n\n  %% server to device control plane\n  WSS --\x3e M_setup[[JSON: setup_mic_and_record]] --\x3e WS --\x3e MIC;\n  WSS --\x3e M_play[[JSON: play_audio url]] --\x3e WS --\x3e SPK;\n  WSS --\x3e M_ack[[JSON: acks / pings / errors]] --\x3e WS --\x3e ST;\n\n  %% mic data path to server\n  MIC --\x3e|pcm 16kHz mono| BUF --\x3e M_pcm;\n  M_pcm[[Binary frame 1024 bytes]];\n  M_pcm --\x3e WS --\x3e WSS;\n\n  %% playback path from url\n  SPK --\x3e|http get| HTTP;\n  HTTP --\x3e M_wav;\n  M_wav[[WAV bytes, skip header]];\n  M_wav --\x3e SPK;\n  SPK --\x3e|scale volume| HBUF --\x3e|to I2S1| SPK;\n  SPK --\x3e M_done;\n  M_done[[JSON: playback_complete]];\n  M_done --\x3e WS --\x3e WSS;'}),"\n",(0,t.jsx)(n.p,{children:"Completed: 2025-05-06 at 9:03 PM"}),"\n",(0,t.jsx)(n.h3,{id:"software-on-the-server-macbook-pro-m1",children:"Software on the Server (MacBook Pro M1)"}),"\n",(0,t.jsx)(n.p,{children:"Dataflow Diagram:"}),"\n",(0,t.jsx)(n.mermaid,{value:'%%{init:{ "flowchart": { "useMaxWidth": true, "curve": "basis" }}}%%\nflowchart TD\n\n  %% ---------- Server side ----------\n  subgraph Proxy_Server_Python\n    WS[WebSocket server and handler];\n    AC[AudioClient session state];\n    REC[Recording to WAV - start / append / stop];\n    PROC[Process complete file coordinator];\n    STTR[STT runner whisper cpp];\n    LLMR[LLM client];\n    CLEAN[Text cleaner for TTS];\n    TTSR[TTS runner coqui];\n    FL[Flask static file server];\n    LOG[Log panel];\n    CFG[Config panel];\n    STATUS[Status bar];\n    AUDIO_DIR[audio_output directory];\n    REC_DIR[esp32_recordings directory];\n  end;\n\n  %% ---------- External actors ----------\n  USER[User];\n  ESP[ESP32 client];\n\n  %% ---------- Messages between ESP and WS (prevents label clumping) ----------\n  subgraph MSG[ESP \u2194 WS messages]\n    direction LR\n    M1((start_record));\n    M2((pcm_chunks));\n    M3((stop_record));\n    M4((play_audio_url));\n    M5((playback_complete));\n  end;\n\n  classDef pkt stroke-dasharray:3 2,stroke-width:1px,fill:#fff,color:#000,font-size:10px;\n  class M1,M2,M3,M4,M5 pkt;\n\n  %% ---------- GUI control & feedback ----------\n  USER --\x3e CFG;\n  CFG --\x3e|config| WS;\n  CFG --\x3e|config| FL;\n  WS --\x3e|status| STATUS;\n  WS --\x3e LOG; PROC --\x3e LOG; STTR --\x3e LOG; LLMR --\x3e LOG; TTSR --\x3e LOG; FL --\x3e LOG;\n\n  %% ---------- ESP <-> WS via message nodes ----------\n  ESP --\x3e M1 --\x3e WS;\n  ESP --\x3e M2 --\x3e WS;\n  ESP --\x3e M3 --\x3e WS;\n  WS  --\x3e M4 --\x3e ESP;\n  ESP --\x3e M5 --\x3e WS;\n\n  %% ---------- Recording & file handling ----------\n  WS --\x3e AC;\n  AC --\x3e|begin| REC;\n  REC --\x3e|open wav| REC_DIR;\n  WS --\x3e|append| REC;\n  WS --\x3e|finalize| REC;\n  REC --\x3e|completed path| PROC;\n\n  %% ---------- Processing pipeline ----------\n  PROC --\x3e|run stt| STTR;\n  STTR --\x3e|transcript| LLMR;\n  LLMR --\x3e|assistant text| CLEAN;\n  CLEAN --\x3e|sanitized text| TTSR;\n  TTSR --\x3e|create wav| AUDIO_DIR;\n  FL --\x3e|serve dir| AUDIO_DIR;\n\n  %% tie play message origin to PROC (dotted hint)\n  PROC -. build url .- M4;\n\n  %% ---------- Playback completion handling ----------\n  WS --\x3e|speaker mode| AC;'}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"case",children:"Case"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:i(5317).A+"",width:"1924",height:"1464"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Removed the second speaker holes, as the design only used 1 EK1725 speaker"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Created a microphone housing module for the INMP441 microphone\n",(0,t.jsx)(n.img,{src:i(6200).A+"",width:"2112",height:"1394"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Extended the port opening to the left so that the on/off switch and USB-C port on the breakout board can be easily accessed."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Created a housing module for holding the breadboard that holds the button for the system"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Removed the second EK1725 mounting nubs"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"evaluation-testing-and-challenges",children:"Evaluation, Testing, and Challenges"}),"\n",(0,t.jsx)(n.h3,{id:"1-speaker-interference",children:"1. Speaker Interference"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"}),(0,t.jsx)(n.br,{}),"\n","Audio output from the speakers suffered from distortion and unwanted interference."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Attempted Solutions:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Designed and 3D-printed a case for the speakers (reduced but did not eliminate interference)."}),"\n",(0,t.jsx)(n.li,{children:"Observed that breadboard wiring and pin placement modulated the signal significantly."}),"\n",(0,t.jsx)(n.li,{children:"Removed the breadboard entirely from the design (partially reduced the problem)."}),"\n",(0,t.jsx)(n.li,{children:"Tuned the firmware to produce sound more consistent with a real speaker."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Final Solution:"}),(0,t.jsx)(n.br,{}),"\n","Encasing the entire system in a custom case, combined with software tuning, proved most effective in reducing interference to an acceptable level."]}),"\n",(0,t.jsx)(n.h3,{id:"2-i2s-overcrowding-on-the-esp32",children:"2. I2S Overcrowding on the ESP32"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"}),(0,t.jsx)(n.br,{}),"\n","The ESP32 experienced conflicts when handling multiple I2S devices (microphone, speaker, and display)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Attempted Solutions:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tried multiplexing two I2S lanes (unsuccessful)."}),"\n",(0,t.jsx)(n.li,{children:"Referenced the ESP32 datasheet, confirming the chip only supports two I2S channels."}),"\n",(0,t.jsx)(n.li,{children:"Switched the display to a different communication protocol (unsuccessful)."}),"\n",(0,t.jsx)(n.li,{children:"Removed the display entirely from the prototype (partially improved stability)."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Final Solution:"}),(0,t.jsx)(n.br,{}),"\n","Implemented a firmware routine that dynamically uninstalls and reinstalls the microphone and speaker drivers whenever they were needed. This approach fully resolved the overcrowding conflict."]}),"\n",(0,t.jsx)(n.h3,{id:"3-machine-learning-model-optimization",children:"3. Machine Learning Model Optimization"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"}),(0,t.jsx)(n.br,{}),"\n","Initial program latency made real-time interactions impractical."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Attempted Solutions:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Kept models permanently loaded in memory (improved performance but consumed excessive resources and risked stability)."}),"\n",(0,t.jsx)(n.li,{children:"Sought optimizations to reduce memory footprint while maintaining speed."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Final Solution:"}),(0,t.jsx)(n.br,{}),"\n","Recompiled the speech-to-text (Whisper) model with Apple Silicon optimizations and switched to a smaller, English-only version. Applied the same approach to the text-to-speech model. This reduced memory usage while delivering significant performance gains."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"results",children:"Results"}),"\n",(0,t.jsx)(n.p,{children:"Video using the LLM Toy"}),"\n",(0,t.jsx)("div",{style:{position:"relative",width:"100%",maxWidth:"800px",margin:"auto",aspectRatio:"16 / 9"},children:(0,t.jsx)("iframe",{src:"https://www.youtube-nocookie.com/embed/aK4zkEI3OfA?modestbranding=1&rel=0",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowFullScreen:!0,style:{position:"absolute",inset:0,width:"100%",height:"100%",border:0}})}),"\n",(0,t.jsx)(n.p,{children:"The kids love it !!!!!!!"}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Short-Term"}),"\nIntegrate"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"PCB Development"}),"\n",(0,t.jsx)(n.li,{children:"MCP Server for a customized knowledge base"}),"\n",(0,t.jsx)(n.li,{children:"Bit level transmission of Audio files (Maybe)"}),"\n",(0,t.jsx)(n.li,{children:"Continuous Conversation"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Long-Term"})}),"\n",(0,t.jsx)(n.h2,{id:"",children:(0,t.jsx)(n.img,{src:i(7425).A+"",width:"2032",height:"662"})}),"\n",(0,t.jsx)(n.h2,{id:"acknowledgments--credits",children:"Acknowledgments & Credits"}),"\n",(0,t.jsx)(n.h3,{id:"attribution-for-raspberry-pi-enclosure",children:"Attribution for Raspberry Pi Enclosure"}),"\n",(0,t.jsxs)(n.p,{children:['This project incorporates a modified version of the "Enclosure for Raspberry Pi with Speakers" 3D model, originally designed by Pierre (Pierre_200611 on Printables) and published on Printables (',(0,t.jsx)(n.a,{href:"https://www.printables.com/model/698359-enclosure-for-raspberry-pi-with-speakers",children:"https://www.printables.com/model/698359-enclosure-for-raspberry-pi-with-speakers"}),"). The original work is licensed under a Creative Commons Attribution 4.0 International License."]}),"\n",(0,t.jsx)(n.p,{children:'Modifications were made, see the "Case" Section of the document.'})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},5317:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/Screenshot-2025-08-01-at-4.12.06PM-1f271a945b7f49260c094614d96074c1.png"},6200:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/Screenshot-2025-08-01-at-4.13.44PM-6fe5d9ddabf82be06b6b0046b4ebba8b.png"},6414:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/Screenshot-2025-08-23-a68709a034fa925b101ce37c8d579fdc.png"},7425:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/Screenshot-2025-08-24-2feacba8ab48ef1b426ff7ed12ca23f5.png"},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},8457:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/IMG_9963-1a2cce8fbb310e15fa4ee3fb9b762feb.jpeg"}}]);